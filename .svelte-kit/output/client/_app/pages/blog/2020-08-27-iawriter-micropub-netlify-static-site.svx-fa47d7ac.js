import{S as n,i as a,s as t,A as s,j as e,m as o,o as p,p as c,v as r,r as i,w as l,q as u,e as h,t as k,k as d,c as f,a as m,g as w,d as g,n as b,b as y,f as v,E,G as A}from"../../chunks/vendor-f5a3c274.js";import{M as P}from"../../chunks/_mdsvex-0fbf9182.js";import"../../chunks/stores-0da78aa4.js";import"../../chunks/FormattedDate-b4a44e35.js";function N(n){let a,t,s,e,o,p,c,r,i,l,u,P,N,W,I,T,O,G,C,x,H,S,M,q,j,L,R,$,D,U,J,F,B,_,K,z,V,Y,Z,Q,X,nn,an,tn,sn,en,on,pn,cn,rn,ln,un,hn,kn,dn,fn,mn,wn,gn,bn,yn,vn,En,An,Pn,Nn,Wn,In,Tn,On,Gn,Cn,xn,Hn,Sn,Mn,qn,jn,Ln,Rn,$n,Dn,Un,Jn,Fn,Bn,_n,Kn,zn,Vn,Yn,Zn,Qn,Xn,na,aa,ta,sa,ea,oa,pa,ca,ra,ia,la,ua,ha,ka,da,fa,ma,wa,ga,ba,ya,va,Ea,Aa,Pa,Na,Wa,Ia,Ta,Oa,Ga,Ca,xa,Ha,Sa,Ma,qa,ja,La,Ra,$a,Da,Ua,Ja,Fa,Ba,_a,Ka,za,Va,Ya,Za,Qa,Xa,nt,at,tt,st,et,ot,pt,ct,rt,it,lt,ut,ht,kt,dt,ft,mt,wt,gt,bt,yt,vt,Et,At,Pt,Nt,Wt,It,Tt,Ot,Gt,Ct,xt,Ht,St,Mt,qt,jt,Lt,Rt,$t,Dt,Ut,Jt,Ft,Bt,_t,Kt,zt,Vt,Yt,Zt,Qt,Xt,ns,as,ts,ss,es,os,ps,cs,rs,is,ls,us,hs,ks,ds,fs,ms,ws,gs,bs,ys,vs,Es;return{c(){a=h("p"),t=k("Publish articles from iA Writer or any other micropub-enabled application to your static site with Netlify Functions. My hope with this project is that with less friction to write and publish a note/article, I’ll do it more."),s=d(),e=h("p"),o=k("On May 13th, 2020 iA "),p=h("a"),c=k("published a blogpost with new features"),r=k(" for iA Writer. One of those features was support for "),i=h("a"),l=k("micropub"),u=k(", an open API standard to create/edit/update articles on blogs."),P=d(),N=h("p"),W=k("Since iA Writer is my favourite tool to write blogposts, it would be amazing if we could remove the step where I paste the content in VSCode to commit it to my blog repository. I’m planning to use this feature mostly for my new "),I=h("a"),T=k("“Notes”"),O=k(" section, used for short posts that require little formatting and editing."),G=d(),C=h("h2"),x=h("a"),H=k("Requirements and Netlify setup"),S=d(),M=h("p"),q=k("In order to do this we need a couple of things, we need a place to accept the API call from iA Writer and somehow and convert that data to a format that can be rendered with "),j=h("a"),L=k("middleman"),R=k(", my static site generator of this moment. Ideally I would not run a server just to accept a webhook every once in a while and this is where "),$=h("a"),D=k("Netlify functions"),U=k(" come in. (or any lambda-based system, such as "),J=h("a"),F=k("AWS Lambda"),B=k(", and you can even do this with "),_=h("a"),K=k("GitHub actions"),z=k(")."),V=d(),Y=h("p"),Z=k("To make all of this work, we want to accept the new article payload from iA Writer and create a new file on GitHub with their API. This will in turn trigger a new Netlify build which will include the new content."),Q=d(),X=h("h3"),nn=h("a"),an=k("GitHub token"),tn=d(),sn=h("p"),en=k("In order to write a file on GitHub we need a personal token with repo write access. (Unfortunately GitHub’s authorisation framework is not great and it’s an all-or-nothing kind of deal regarding personal tokens, so make sure you keep it in a safe place and "),on=h("strong"),pn=k("NOT"),cn=k(" in public code. (or any code for that matter))."),rn=d(),ln=h("p"),un=k("Under your GitHub profile go to settings and “Ceveloper settings” > “Personal access tokens”."),hn=d(),kn=h("p"),dn=h("img"),mn=d(),wn=h("p"),gn=k("Create a new token with a descriptive name and only the “repo” scope checked."),bn=d(),yn=h("p"),vn=h("img"),An=d(),Pn=h("h3"),Nn=h("a"),Wn=k("Netlify environment variables"),In=d(),Tn=h("p"),On=k("In order to use the token in our Netlify function, we need to expose it to the function, we can do this through “environment variables” on Netlify. You can find this under the “Build & Deploy” tab of the “settings” of your application."),Gn=d(),Cn=h("p"),xn=h("img"),Sn=d(),Mn=h("p"),qn=k("Let’s add a new environment variable called "),jn=h("code"),Ln=k("GITHUB_ACCESS_TOKEN"),Rn=k(" with the token from GitHub as the value.\nWhile we’re here lets also add a token we can use to authenticate iA Writer when it posts to our Netlify fuction."),$n=d(),Dn=h("p"),Un=k("Create a second environment variable called "),Jn=h("code"),Fn=k("TOKEN"),Bn=k(" with a random value."),_n=d(),Kn=h("h2"),zn=h("a"),Vn=k("iA Writer flow."),Yn=d(),Zn=h("p"),Qn=k("iA Writer has a bit of a weird flow when adding a micropub endpoint, it follows these steps:"),Xn=d(),na=h("p"),aa=h("strong"),ta=k("Parse the html page from the config and discover a "),sa=h("code"),ea=k("<link>"),oa=k(" tag."),pa=k("\nInstead of providing an URL to the endpoint directly, iA Writer expects an url to the root of your site, where it will attempt to detect a "),ca=h("code"),ra=k("<link>"),ia=k(" in the "),la=h("code"),ua=k("<head>"),ha=k(" of your html with a "),ka=h("code"),da=k("rel"),fa=k(" of "),ma=h("code"),wa=k("micropub"),ga=k(", for example:"),ba=d(),ya=h("pre"),va=d(),Ea=h("p"),Aa=h("strong"),Pa=k("Call the endpoint as GET with the token provided, this should return a config for the micropub API."),Na=k("\nOnce the micropub endpoint is discovered, iA Writer makes a GET request to the endpoint, expecting a JSON body in return, where it can detect the features of your micropub service."),Wa=d(),Ia=h("p"),Ta=k("It’s perfenctly fine to return an empty JSON body in return:"),Oa=d(),Ga=h("pre"),Ca=d(),xa=h("p"),Ha=h("strong"),Sa=k("When posting call the endpoint as POST with the title/markdown as JSON"),Ma=d(),qa=h("p"),ja=k("iA Writer expects a “redirect” header as a successful response and will open a browser window to this redirect target to show you the posted content."),La=d(),Ra=h("pre"),$a=d(),Da=h("p"),Ua=k("(This works if you have a CMS that posts the content instantly, in our case you’ll see a page without the post, since Netlify still has to build the new site)."),Ja=d(),Fa=h("h2"),Ba=h("a"),_a=k("Micropub endpoint"),Ka=d(),za=h("p"),Va=k("In order to satisfy the first step for the setup flow, let’s add the required metadata tag to the ”"),Ya=h("head"),Za=k("” section of your site. (this is usually done in the “layout” file)."),Qa=d(),Xa=h("pre"),nt=d(),at=h("p"),tt=k("This link in the header should point to the Netlify funcion we’re about to create."),st=d(),et=h("h2"),ot=h("a"),pt=k("Netlify function"),ct=d(),rt=h("p"),it=k("In order to accept micropub content from iA Writer, we need to write a Netlify function that can handle both a GET request to return the config and a POST request to handle a new article."),lt=d(),ut=h("p"),ht=k("For more information on how to setup functions, see the "),kt=h("a"),dt=k("Netlify functions docs"),ft=k("."),mt=d(),wt=h("p"),gt=k("In order to create a new page on GitHub, we only have one dependency the "),bt=h("code"),yt=k("@octokit/rest"),vt=k(" package, which you can install in the root of your Netlify App with your favorite package manager, e.g."),Et=d(),At=h("pre"),Pt=d(),Nt=h("p"),Wt=k("Being responsible developers, we stored the token we used to setup this flow in iA Writer in an Environment variable on Netlify."),It=d(),Tt=h("pre"),Ot=d(),Gt=h("h2"),Ct=h("a"),xt=k("iA Writer setup"),Ht=d(),St=h("p"),Mt=k("Finally, let’s set up iA Writer to post to our Netlify function."),qt=d(),jt=h("p"),Lt=k("Under “preferences” there’s an “accounts” section, where we can add a new “micropub” account."),Rt=d(),$t=h("p"),Dt=h("img"),Jt=d(),Ft=h("p"),Bt=k("To make it a bit easier for ourselves, we’ll use a token to authenticate the endpoint and keep away from oAuth for now. In the “URL” field, fill in the root of your blog, not the API endpoint for micropub. This isn’t really explained, but iA Writer will attempt to find the endpoint by itself from the HML source of the page. Putting the API endpoint in this field here will cause iA Writer to hang until you force-close it."),_t=d(),Kt=h("p"),zt=h("img"),Yt=d(),Zt=h("p"),Qt=k("Once complete, we need to change one setting, we want iA Writer to send us the raw markdown, and not the content rendered by iA Writer in html. You can change this under the settings for the micropub account."),Xt=d(),ns=h("p"),as=h("img"),ss=d(),es=h("h2"),os=h("a"),ps=k("Publish an article"),cs=d(),rs=h("p"),is=k("With everything setup and deployed we can try publishing an article. After writing some content, click "),ls=h("strong"),us=k("“File”"),hs=k(" > "),ks=h("strong"),ds=k("“Publish”"),fs=k(" and select your newly added micropub endpoint."),ms=d(),ws=h("p"),gs=h("img"),ys=d(),vs=h("p"),Es=k("It should show a loading indicator and then open a new  browser window pointing to the article url. (which might return a 404, because Netlify is still busy building your site)."),this.h()},l(n){a=f(n,"P",{});var h=m(a);t=w(h,"Publish articles from iA Writer or any other micropub-enabled application to your static site with Netlify Functions. My hope with this project is that with less friction to write and publish a note/article, I’ll do it more."),h.forEach(g),s=b(n),e=f(n,"P",{});var k=m(e);o=w(k,"On May 13th, 2020 iA "),p=f(k,"A",{href:!0,rel:!0});var d=m(p);c=w(d,"published a blogpost with new features"),d.forEach(g),r=w(k," for iA Writer. One of those features was support for "),i=f(k,"A",{href:!0,rel:!0});var y=m(i);l=w(y,"micropub"),y.forEach(g),u=w(k,", an open API standard to create/edit/update articles on blogs."),k.forEach(g),P=b(n),N=f(n,"P",{});var v=m(N);W=w(v,"Since iA Writer is my favourite tool to write blogposts, it would be amazing if we could remove the step where I paste the content in VSCode to commit it to my blog repository. I’m planning to use this feature mostly for my new "),I=f(v,"A",{href:!0});var E=m(I);T=w(E,"“Notes”"),E.forEach(g),O=w(v," section, used for short posts that require little formatting and editing."),v.forEach(g),G=b(n),C=f(n,"H2",{id:!0});var A=m(C);x=f(A,"A",{href:!0});var fn=m(x);H=w(fn,"Requirements and Netlify setup"),fn.forEach(g),A.forEach(g),S=b(n),M=f(n,"P",{});var En=m(M);q=w(En,"In order to do this we need a couple of things, we need a place to accept the API call from iA Writer and somehow and convert that data to a format that can be rendered with "),j=f(En,"A",{href:!0,rel:!0});var Hn=m(j);L=w(Hn,"middleman"),Hn.forEach(g),R=w(En,", my static site generator of this moment. Ideally I would not run a server just to accept a webhook every once in a while and this is where "),$=f(En,"A",{href:!0,rel:!0});var Ut=m($);D=w(Ut,"Netlify functions"),Ut.forEach(g),U=w(En," come in. (or any lambda-based system, such as "),J=f(En,"A",{href:!0,rel:!0});var Vt=m(J);F=w(Vt,"AWS Lambda"),Vt.forEach(g),B=w(En,", and you can even do this with "),_=f(En,"A",{href:!0,rel:!0});var ts=m(_);K=w(ts,"GitHub actions"),ts.forEach(g),z=w(En,")."),En.forEach(g),V=b(n),Y=f(n,"P",{});var bs=m(Y);Z=w(bs,"To make all of this work, we want to accept the new article payload from iA Writer and create a new file on GitHub with their API. This will in turn trigger a new Netlify build which will include the new content."),bs.forEach(g),Q=b(n),X=f(n,"H3",{id:!0});var As=m(X);nn=f(As,"A",{href:!0});var Ps=m(nn);an=w(Ps,"GitHub token"),Ps.forEach(g),As.forEach(g),tn=b(n),sn=f(n,"P",{});var Ns=m(sn);en=w(Ns,"In order to write a file on GitHub we need a personal token with repo write access. (Unfortunately GitHub’s authorisation framework is not great and it’s an all-or-nothing kind of deal regarding personal tokens, so make sure you keep it in a safe place and "),on=f(Ns,"STRONG",{});var Ws=m(on);pn=w(Ws,"NOT"),Ws.forEach(g),cn=w(Ns," in public code. (or any code for that matter))."),Ns.forEach(g),rn=b(n),ln=f(n,"P",{});var Is=m(ln);un=w(Is,"Under your GitHub profile go to settings and “Ceveloper settings” > “Personal access tokens”."),Is.forEach(g),hn=b(n),kn=f(n,"P",{});var Ts=m(kn);dn=f(Ts,"IMG",{src:!0,alt:!0}),Ts.forEach(g),mn=b(n),wn=f(n,"P",{});var Os=m(wn);gn=w(Os,"Create a new token with a descriptive name and only the “repo” scope checked."),Os.forEach(g),bn=b(n),yn=f(n,"P",{});var Gs=m(yn);vn=f(Gs,"IMG",{src:!0,alt:!0}),Gs.forEach(g),An=b(n),Pn=f(n,"H3",{id:!0});var Cs=m(Pn);Nn=f(Cs,"A",{href:!0});var xs=m(Nn);Wn=w(xs,"Netlify environment variables"),xs.forEach(g),Cs.forEach(g),In=b(n),Tn=f(n,"P",{});var Hs=m(Tn);On=w(Hs,"In order to use the token in our Netlify function, we need to expose it to the function, we can do this through “environment variables” on Netlify. You can find this under the “Build & Deploy” tab of the “settings” of your application."),Hs.forEach(g),Gn=b(n),Cn=f(n,"P",{});var Ss=m(Cn);xn=f(Ss,"IMG",{src:!0,alt:!0}),Ss.forEach(g),Sn=b(n),Mn=f(n,"P",{});var Ms=m(Mn);qn=w(Ms,"Let’s add a new environment variable called "),jn=f(Ms,"CODE",{});var qs=m(jn);Ln=w(qs,"GITHUB_ACCESS_TOKEN"),qs.forEach(g),Rn=w(Ms," with the token from GitHub as the value.\nWhile we’re here lets also add a token we can use to authenticate iA Writer when it posts to our Netlify fuction."),Ms.forEach(g),$n=b(n),Dn=f(n,"P",{});var js=m(Dn);Un=w(js,"Create a second environment variable called "),Jn=f(js,"CODE",{});var Ls=m(Jn);Fn=w(Ls,"TOKEN"),Ls.forEach(g),Bn=w(js," with a random value."),js.forEach(g),_n=b(n),Kn=f(n,"H2",{id:!0});var Rs=m(Kn);zn=f(Rs,"A",{href:!0});var $s=m(zn);Vn=w($s,"iA Writer flow."),$s.forEach(g),Rs.forEach(g),Yn=b(n),Zn=f(n,"P",{});var Ds=m(Zn);Qn=w(Ds,"iA Writer has a bit of a weird flow when adding a micropub endpoint, it follows these steps:"),Ds.forEach(g),Xn=b(n),na=f(n,"P",{});var Us=m(na);aa=f(Us,"STRONG",{});var Js=m(aa);ta=w(Js,"Parse the html page from the config and discover a "),sa=f(Js,"CODE",{});var Fs=m(sa);ea=w(Fs,"<link>"),Fs.forEach(g),oa=w(Js," tag."),Js.forEach(g),pa=w(Us,"\nInstead of providing an URL to the endpoint directly, iA Writer expects an url to the root of your site, where it will attempt to detect a "),ca=f(Us,"CODE",{});var Bs=m(ca);ra=w(Bs,"<link>"),Bs.forEach(g),ia=w(Us," in the "),la=f(Us,"CODE",{});var _s=m(la);ua=w(_s,"<head>"),_s.forEach(g),ha=w(Us," of your html with a "),ka=f(Us,"CODE",{});var Ks=m(ka);da=w(Ks,"rel"),Ks.forEach(g),fa=w(Us," of "),ma=f(Us,"CODE",{});var zs=m(ma);wa=w(zs,"micropub"),zs.forEach(g),ga=w(Us,", for example:"),Us.forEach(g),ba=b(n),ya=f(n,"PRE",{class:!0}),m(ya).forEach(g),va=b(n),Ea=f(n,"P",{});var Vs=m(Ea);Aa=f(Vs,"STRONG",{});var Ys=m(Aa);Pa=w(Ys,"Call the endpoint as GET with the token provided, this should return a config for the micropub API."),Ys.forEach(g),Na=w(Vs,"\nOnce the micropub endpoint is discovered, iA Writer makes a GET request to the endpoint, expecting a JSON body in return, where it can detect the features of your micropub service."),Vs.forEach(g),Wa=b(n),Ia=f(n,"P",{});var Zs=m(Ia);Ta=w(Zs,"It’s perfenctly fine to return an empty JSON body in return:"),Zs.forEach(g),Oa=b(n),Ga=f(n,"PRE",{class:!0}),m(Ga).forEach(g),Ca=b(n),xa=f(n,"P",{});var Qs=m(xa);Ha=f(Qs,"STRONG",{});var Xs=m(Ha);Sa=w(Xs,"When posting call the endpoint as POST with the title/markdown as JSON"),Xs.forEach(g),Qs.forEach(g),Ma=b(n),qa=f(n,"P",{});var ne=m(qa);ja=w(ne,"iA Writer expects a “redirect” header as a successful response and will open a browser window to this redirect target to show you the posted content."),ne.forEach(g),La=b(n),Ra=f(n,"PRE",{class:!0}),m(Ra).forEach(g),$a=b(n),Da=f(n,"P",{});var ae=m(Da);Ua=w(ae,"(This works if you have a CMS that posts the content instantly, in our case you’ll see a page without the post, since Netlify still has to build the new site)."),ae.forEach(g),Ja=b(n),Fa=f(n,"H2",{id:!0});var te=m(Fa);Ba=f(te,"A",{href:!0});var se=m(Ba);_a=w(se,"Micropub endpoint"),se.forEach(g),te.forEach(g),Ka=b(n),za=f(n,"P",{});var ee=m(za);Va=w(ee,"In order to satisfy the first step for the setup flow, let’s add the required metadata tag to the ”"),Ya=f(ee,"HEAD",{});var oe=m(Ya);Za=w(oe,"” section of your site. (this is usually done in the “layout” file)."),oe.forEach(g),ee.forEach(g),Qa=b(n),Xa=f(n,"PRE",{class:!0}),m(Xa).forEach(g),nt=b(n),at=f(n,"P",{});var pe=m(at);tt=w(pe,"This link in the header should point to the Netlify funcion we’re about to create."),pe.forEach(g),st=b(n),et=f(n,"H2",{id:!0});var ce=m(et);ot=f(ce,"A",{href:!0});var re=m(ot);pt=w(re,"Netlify function"),re.forEach(g),ce.forEach(g),ct=b(n),rt=f(n,"P",{});var ie=m(rt);it=w(ie,"In order to accept micropub content from iA Writer, we need to write a Netlify function that can handle both a GET request to return the config and a POST request to handle a new article."),ie.forEach(g),lt=b(n),ut=f(n,"P",{});var le=m(ut);ht=w(le,"For more information on how to setup functions, see the "),kt=f(le,"A",{href:!0,rel:!0});var ue=m(kt);dt=w(ue,"Netlify functions docs"),ue.forEach(g),ft=w(le,"."),le.forEach(g),mt=b(n),wt=f(n,"P",{});var he=m(wt);gt=w(he,"In order to create a new page on GitHub, we only have one dependency the "),bt=f(he,"CODE",{});var ke=m(bt);yt=w(ke,"@octokit/rest"),ke.forEach(g),vt=w(he," package, which you can install in the root of your Netlify App with your favorite package manager, e.g."),he.forEach(g),Et=b(n),At=f(n,"PRE",{class:!0}),m(At).forEach(g),Pt=b(n),Nt=f(n,"P",{});var de=m(Nt);Wt=w(de,"Being responsible developers, we stored the token we used to setup this flow in iA Writer in an Environment variable on Netlify."),de.forEach(g),It=b(n),Tt=f(n,"PRE",{class:!0}),m(Tt).forEach(g),Ot=b(n),Gt=f(n,"H2",{id:!0});var fe=m(Gt);Ct=f(fe,"A",{href:!0});var me=m(Ct);xt=w(me,"iA Writer setup"),me.forEach(g),fe.forEach(g),Ht=b(n),St=f(n,"P",{});var we=m(St);Mt=w(we,"Finally, let’s set up iA Writer to post to our Netlify function."),we.forEach(g),qt=b(n),jt=f(n,"P",{});var ge=m(jt);Lt=w(ge,"Under “preferences” there’s an “accounts” section, where we can add a new “micropub” account."),ge.forEach(g),Rt=b(n),$t=f(n,"P",{});var be=m($t);Dt=f(be,"IMG",{src:!0,alt:!0}),be.forEach(g),Jt=b(n),Ft=f(n,"P",{});var ye=m(Ft);Bt=w(ye,"To make it a bit easier for ourselves, we’ll use a token to authenticate the endpoint and keep away from oAuth for now. In the “URL” field, fill in the root of your blog, not the API endpoint for micropub. This isn’t really explained, but iA Writer will attempt to find the endpoint by itself from the HML source of the page. Putting the API endpoint in this field here will cause iA Writer to hang until you force-close it."),ye.forEach(g),_t=b(n),Kt=f(n,"P",{});var ve=m(Kt);zt=f(ve,"IMG",{src:!0,alt:!0}),ve.forEach(g),Yt=b(n),Zt=f(n,"P",{});var Ee=m(Zt);Qt=w(Ee,"Once complete, we need to change one setting, we want iA Writer to send us the raw markdown, and not the content rendered by iA Writer in html. You can change this under the settings for the micropub account."),Ee.forEach(g),Xt=b(n),ns=f(n,"P",{});var Ae=m(ns);as=f(Ae,"IMG",{src:!0,alt:!0}),Ae.forEach(g),ss=b(n),es=f(n,"H2",{id:!0});var Pe=m(es);os=f(Pe,"A",{href:!0});var Ne=m(os);ps=w(Ne,"Publish an article"),Ne.forEach(g),Pe.forEach(g),cs=b(n),rs=f(n,"P",{});var We=m(rs);is=w(We,"With everything setup and deployed we can try publishing an article. After writing some content, click "),ls=f(We,"STRONG",{});var Ie=m(ls);us=w(Ie,"“File”"),Ie.forEach(g),hs=w(We," > "),ks=f(We,"STRONG",{});var Te=m(ks);ds=w(Te,"“Publish”"),Te.forEach(g),fs=w(We," and select your newly added micropub endpoint."),We.forEach(g),ms=b(n),ws=f(n,"P",{});var Oe=m(ws);gs=f(Oe,"IMG",{src:!0,alt:!0}),Oe.forEach(g),ys=b(n),vs=f(n,"P",{});var Ge=m(vs);Es=w(Ge,"It should show a loading indicator and then open a new  browser window pointing to the article url. (which might return a 404, because Netlify is still busy building your site)."),Ge.forEach(g),this.h()},h(){y(p,"href","https://ia.net/writer/blog/new-pdf-preview-better-web-publishing-improved-editing"),y(p,"rel","nofollow"),y(i,"href","https://indieweb.org/Micropub"),y(i,"rel","nofollow"),y(I,"href","/notes"),y(x,"href","#requirements-and-netlify-setup"),y(C,"id","requirements-and-netlify-setup"),y(j,"href","https://middlemanapp.com"),y(j,"rel","nofollow"),y($,"href","https://www.netlify.com/products/functions/"),y($,"rel","nofollow"),y(J,"href","https://aws.amazon.com/lambda/"),y(J,"rel","nofollow"),y(_,"href","https://github.com/features/actions"),y(_,"rel","nofollow"),y(nn,"href","#github-token"),y(X,"id","github-token"),dn.src!==(fn="https://d3khpbv2gxh34v.cloudfront.net/r/blog/micropub/github-token-screen.png")&&y(dn,"src","https://d3khpbv2gxh34v.cloudfront.net/r/blog/micropub/github-token-screen.png"),y(dn,"alt","GitHub token"),vn.src!==(En="https://d3khpbv2gxh34v.cloudfront.net/r/blog/micropub/github-add-token.png")&&y(vn,"src","https://d3khpbv2gxh34v.cloudfront.net/r/blog/micropub/github-add-token.png"),y(vn,"alt","GitHub add token"),y(Nn,"href","#netlify-environment-variables"),y(Pn,"id","netlify-environment-variables"),xn.src!==(Hn="https://d3khpbv2gxh34v.cloudfront.net/r/blog/micropub/netlify-env-vars.png")&&y(xn,"src","https://d3khpbv2gxh34v.cloudfront.net/r/blog/micropub/netlify-env-vars.png"),y(xn,"alt","Netlify env vars screen"),y(zn,"href","#ia-writer-flow"),y(Kn,"id","ia-writer-flow"),y(ya,"class","language-html"),y(Ga,"class","language-js"),y(Ra,"class","language-js"),y(Ba,"href","#micropub-endpoint"),y(Fa,"id","micropub-endpoint"),y(Xa,"class","language-html"),y(ot,"href","#netlify-function"),y(et,"id","netlify-function"),y(kt,"href","https://docs.netlify.com/functions/overview/"),y(kt,"rel","nofollow"),y(At,"class","language-null"),y(Tt,"class","language-js"),y(Ct,"href","#ia-writer-setup"),y(Gt,"id","ia-writer-setup"),Dt.src!==(Ut="https://d3khpbv2gxh34v.cloudfront.net/r/blog/micropub/iawriter-micropub.png")&&y(Dt,"src","https://d3khpbv2gxh34v.cloudfront.net/r/blog/micropub/iawriter-micropub.png"),y(Dt,"alt","iA Writer micropub account"),zt.src!==(Vt="https://d3khpbv2gxh34v.cloudfront.net/r/blog/micropub/iawriter-add-micropub.png")&&y(zt,"src","https://d3khpbv2gxh34v.cloudfront.net/r/blog/micropub/iawriter-add-micropub.png"),y(zt,"alt","iA Writer new micropub account"),as.src!==(ts="https://d3khpbv2gxh34v.cloudfront.net/r/blog/micropub/iawriter-micropub-markdown.png")&&y(as,"src","https://d3khpbv2gxh34v.cloudfront.net/r/blog/micropub/iawriter-micropub-markdown.png"),y(as,"alt","iA Writer markdown settings"),y(os,"href","#publish-an-article"),y(es,"id","publish-an-article"),gs.src!==(bs="https://d3khpbv2gxh34v.cloudfront.net/r/blog/micropub/iawriter-publish-micropub.png")&&y(gs,"src","https://d3khpbv2gxh34v.cloudfront.net/r/blog/micropub/iawriter-publish-micropub.png"),y(gs,"alt","iA Writer publish through a micropub endpoint")},m(n,h){v(n,a,h),E(a,t),v(n,s,h),v(n,e,h),E(e,o),E(e,p),E(p,c),E(e,r),E(e,i),E(i,l),E(e,u),v(n,P,h),v(n,N,h),E(N,W),E(N,I),E(I,T),E(N,O),v(n,G,h),v(n,C,h),E(C,x),E(x,H),v(n,S,h),v(n,M,h),E(M,q),E(M,j),E(j,L),E(M,R),E(M,$),E($,D),E(M,U),E(M,J),E(J,F),E(M,B),E(M,_),E(_,K),E(M,z),v(n,V,h),v(n,Y,h),E(Y,Z),v(n,Q,h),v(n,X,h),E(X,nn),E(nn,an),v(n,tn,h),v(n,sn,h),E(sn,en),E(sn,on),E(on,pn),E(sn,cn),v(n,rn,h),v(n,ln,h),E(ln,un),v(n,hn,h),v(n,kn,h),E(kn,dn),v(n,mn,h),v(n,wn,h),E(wn,gn),v(n,bn,h),v(n,yn,h),E(yn,vn),v(n,An,h),v(n,Pn,h),E(Pn,Nn),E(Nn,Wn),v(n,In,h),v(n,Tn,h),E(Tn,On),v(n,Gn,h),v(n,Cn,h),E(Cn,xn),v(n,Sn,h),v(n,Mn,h),E(Mn,qn),E(Mn,jn),E(jn,Ln),E(Mn,Rn),v(n,$n,h),v(n,Dn,h),E(Dn,Un),E(Dn,Jn),E(Jn,Fn),E(Dn,Bn),v(n,_n,h),v(n,Kn,h),E(Kn,zn),E(zn,Vn),v(n,Yn,h),v(n,Zn,h),E(Zn,Qn),v(n,Xn,h),v(n,na,h),E(na,aa),E(aa,ta),E(aa,sa),E(sa,ea),E(aa,oa),E(na,pa),E(na,ca),E(ca,ra),E(na,ia),E(na,la),E(la,ua),E(na,ha),E(na,ka),E(ka,da),E(na,fa),E(na,ma),E(ma,wa),E(na,ga),v(n,ba,h),v(n,ya,h),ya.innerHTML='<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>micropub<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://&lt;blog url>/.netlify/functions/micropub<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code>',v(n,va,h),v(n,Ea,h),E(Ea,Aa),E(Aa,Pa),E(Ea,Na),v(n,Wa,h),v(n,Ia,h),E(Ia,Ta),v(n,Oa,h),v(n,Ga,h),Ga.innerHTML='<code class="language-js">  <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n    statusCode<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n    body<span class="token operator">:</span> <span class="token string">"&#123;&#125;"</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',v(n,Ca,h),v(n,xa,h),E(xa,Ha),E(Ha,Sa),v(n,Ma,h),v(n,qa,h),E(qa,ja),v(n,La,h),v(n,Ra,h),Ra.innerHTML='<code class="language-js">  <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n    statusCode<span class="token operator">:</span> <span class="token number">201</span><span class="token punctuation">,</span>\n    headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n      Location<span class="token operator">:</span> <span class="token string">"https://&lt;blog url>/notes"</span><span class="token punctuation">,</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',v(n,$a,h),v(n,Da,h),E(Da,Ua),v(n,Ja,h),v(n,Fa,h),E(Fa,Ba),E(Ba,_a),v(n,Ka,h),v(n,za,h),E(za,Va),E(za,Ya),E(Ya,Za),v(n,Qa,h),v(n,Xa,h),Xa.innerHTML='<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>micropub<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://&lt;blog url>/.netlify/functions/micropub<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code>',v(n,nt,h),v(n,at,h),E(at,tt),v(n,st,h),v(n,et,h),E(et,ot),E(ot,pt),v(n,ct,h),v(n,rt,h),E(rt,it),v(n,lt,h),v(n,ut,h),E(ut,ht),E(ut,kt),E(kt,dt),E(ut,ft),v(n,mt,h),v(n,wt,h),E(wt,gt),E(wt,bt),E(bt,yt),E(wt,vt),v(n,Et,h),v(n,At,h),At.innerHTML='<code class="language-null">yarn add @octokit/rest</code>',v(n,Pt,h),v(n,Nt,h),E(Nt,Wt),v(n,It,h),v(n,Tt,h),Tt.innerHTML='<code class="language-js"><span class="token comment">// ./functions/micropub.js</span>\n<span class="token comment">// Our only dependency is @octokit/rest</span>\n<span class="token comment">// We use the token/GitHub auth we\'ve set in the ENV vars before.</span>\n<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> Octokit <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@octokit/rest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> octokit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Octokit</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  auth<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">GITHUB_ACCESS_TOKEN</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n\nexports<span class="token punctuation">.</span><span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> context<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n\n  <span class="token comment">// Verify the token we will use in iA Writer,</span>\n  <span class="token comment">// set in Netlify Env settings on netlify.com</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n      <span class="token operator">!</span>event<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"authorization"</span><span class="token punctuation">]</span> <span class="token operator">||</span>\n      event<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"authorization"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"Bearer "</span> <span class="token operator">+</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TOKEN</span>\n    <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>\n    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n      statusCode<span class="token operator">:</span> <span class="token number">401</span><span class="token punctuation">,</span>\n      body<span class="token operator">:</span> <span class="token string">"&#123;&#125;"</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">&#125;</span>\n\n  <span class="token comment">// GET request, used by iA Writer to get the micropub config</span>\n  <span class="token comment">// we can return an empty JSON here</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>httpMethod <span class="token operator">===</span> <span class="token string">\'GET\'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n      statusCode<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n      body<span class="token operator">:</span> <span class="token string">"&#123;&#125;"</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">&#125;</span>\n\n  <span class="token comment">// Parse the JSON event body from iA Writer</span>\n  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>body<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Data: "</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// The format is a bit weird,</span>\n  <span class="token comment">// where title and content are array values with a single entry</span>\n  <span class="token keyword">const</span> title <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"properties"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> content <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"properties"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n\n  <span class="token comment">// I want the format of the filename to be yyyy-mm-dd-title-as-slug.html.md</span>\n  <span class="token comment">// Javascript date handling is poor, (no strftime),</span>\n  <span class="token comment">// lets hack something with the default date functions</span>\n  <span class="token comment">// This saves us a library to import, also use a poor-mans slug generator</span>\n  <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> filename <span class="token operator">=</span> <span class="token punctuation">[</span>\n    date<span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'T\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// the date</span>\n    title<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[W]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token comment">// the slug</span>\n  <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span>\n  <span class="token keyword">var</span> fileContent <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token comment">// If we\'ve written a post without fontmatter, insert default fontmatter</span>\n  <span class="token comment">// this allows us to override the fontmatter in iA Writer if we want, but</span>\n  <span class="token comment">// we can also just throw out a quick article without worrying about this.</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>content<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"---"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    fileContent<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"---"</span><span class="token punctuation">)</span>\n    fileContent<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'date: \'</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    fileContent<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'title: \'</span> <span class="token operator">+</span> title<span class="token punctuation">)</span>\n    fileContent<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'category: note\'</span><span class="token punctuation">)</span>\n    fileContent<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'---\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">&#125;</span>\n  fileContent<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>\n\n  <span class="token comment">// Create a new file on GitHub with the octokit library</span>\n  <span class="token comment">// owner/repo and message/path are hardcoded here,</span>\n  <span class="token comment">// you might want to change those to your own likings.</span>\n  <span class="token keyword">return</span> octokit<span class="token punctuation">.</span>repos<span class="token punctuation">.</span><span class="token function">createOrUpdateFileContents</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n    owner<span class="token operator">:</span> <span class="token string">"matsimitsu"</span><span class="token punctuation">,</span>\n    repo<span class="token operator">:</span> <span class="token string">"matsimitsu.com"</span><span class="token punctuation">,</span>\n    message<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">"Adding note: "</span> <span class="token operator">+</span> title<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    path<span class="token operator">:</span> <span class="token string">"source/notes/"</span> <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">".html.md"</span><span class="token punctuation">,</span>\n    content<span class="token operator">:</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>fileContent<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"base64"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// Redirect iA Writer to the notes page, where the post will show up.</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n      statusCode<span class="token operator">:</span> <span class="token number">201</span><span class="token punctuation">,</span>\n      headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n        Location<span class="token operator">:</span> <span class="token string">"https://matsimitsu.com/notes"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">&#125;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// Log any errors, so we can debug later.</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n      statusCode<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>\n      body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n<span class="token punctuation">&#125;</span></code>',v(n,Ot,h),v(n,Gt,h),E(Gt,Ct),E(Ct,xt),v(n,Ht,h),v(n,St,h),E(St,Mt),v(n,qt,h),v(n,jt,h),E(jt,Lt),v(n,Rt,h),v(n,$t,h),E($t,Dt),v(n,Jt,h),v(n,Ft,h),E(Ft,Bt),v(n,_t,h),v(n,Kt,h),E(Kt,zt),v(n,Yt,h),v(n,Zt,h),E(Zt,Qt),v(n,Xt,h),v(n,ns,h),E(ns,as),v(n,ss,h),v(n,es,h),E(es,os),E(os,ps),v(n,cs,h),v(n,rs,h),E(rs,is),E(rs,ls),E(ls,us),E(rs,hs),E(rs,ks),E(ks,ds),E(rs,fs),v(n,ms,h),v(n,ws,h),E(ws,gs),v(n,ys,h),v(n,vs,h),E(vs,Es)},p:A,d(n){n&&g(a),n&&g(s),n&&g(e),n&&g(P),n&&g(N),n&&g(G),n&&g(C),n&&g(S),n&&g(M),n&&g(V),n&&g(Y),n&&g(Q),n&&g(X),n&&g(tn),n&&g(sn),n&&g(rn),n&&g(ln),n&&g(hn),n&&g(kn),n&&g(mn),n&&g(wn),n&&g(bn),n&&g(yn),n&&g(An),n&&g(Pn),n&&g(In),n&&g(Tn),n&&g(Gn),n&&g(Cn),n&&g(Sn),n&&g(Mn),n&&g($n),n&&g(Dn),n&&g(_n),n&&g(Kn),n&&g(Yn),n&&g(Zn),n&&g(Xn),n&&g(na),n&&g(ba),n&&g(ya),n&&g(va),n&&g(Ea),n&&g(Wa),n&&g(Ia),n&&g(Oa),n&&g(Ga),n&&g(Ca),n&&g(xa),n&&g(Ma),n&&g(qa),n&&g(La),n&&g(Ra),n&&g($a),n&&g(Da),n&&g(Ja),n&&g(Fa),n&&g(Ka),n&&g(za),n&&g(Qa),n&&g(Xa),n&&g(nt),n&&g(at),n&&g(st),n&&g(et),n&&g(ct),n&&g(rt),n&&g(lt),n&&g(ut),n&&g(mt),n&&g(wt),n&&g(Et),n&&g(At),n&&g(Pt),n&&g(Nt),n&&g(It),n&&g(Tt),n&&g(Ot),n&&g(Gt),n&&g(Ht),n&&g(St),n&&g(qt),n&&g(jt),n&&g(Rt),n&&g($t),n&&g(Jt),n&&g(Ft),n&&g(_t),n&&g(Kt),n&&g(Yt),n&&g(Zt),n&&g(Xt),n&&g(ns),n&&g(ss),n&&g(es),n&&g(cs),n&&g(rs),n&&g(ms),n&&g(ws),n&&g(ys),n&&g(vs)}}}function W(n){let a,t;const h=[I];let k={$$slots:{default:[N]},$$scope:{ctx:n}};for(let e=0;e<h.length;e+=1)k=s(k,h[e]);return a=new P({props:k}),{c(){e(a.$$.fragment)},l(n){o(a.$$.fragment,n)},m(n,s){p(a,n,s),t=!0},p(n,[t]){const s=0&t?c(h,[u(I)]):{};1&t&&(s.$$scope={dirty:t,ctx:n}),a.$set(s)},i(n){t||(r(a.$$.fragment,n),t=!0)},o(n){i(a.$$.fragment,n),t=!1},d(n){l(a,n)}}}const I={title:"Publish articles from iA Writer to your static site.",date:"2020-08-27T00:00:00.000Z",summary:"My hope with this project is that with less friction to write and publish a note/article, I'll do it more."};export default class extends n{constructor(n){super(),a(this,n,null,W,t,{})}}export{I as metadata};
