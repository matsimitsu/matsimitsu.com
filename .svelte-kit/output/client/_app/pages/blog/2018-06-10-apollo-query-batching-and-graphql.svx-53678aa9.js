import{S as n,i as a,s,A as t,j as e,m as o,o as p,p as c,v as l,r as u,w as r,q as i,e as k,t as d,k as m,c as h,a as g,g as y,d as b,n as f,b as w,f as v,E as q,G as x}from"../../chunks/vendor-f5a3c274.js";import{M as $}from"../../chunks/_mdsvex-0fbf9182.js";import"../../chunks/stores-0da78aa4.js";import"../../chunks/FormattedDate-b4a44e35.js";function j(n){let a,s,t,e,o,p,c,l,u,r,i,$,j,E,I;return{c(){a=k("p"),s=d("Query batching is a way to speed up your application. Instead of waiting on multiple client-server roundtrips to load data, everything is loaded at once."),t=m(),e=k("p"),o=d("Enabling query batching in Apollo is as easy as using another network provider:"),p=m(),c=k("pre"),l=m(),u=k("p"),r=d("On the Ruby you need to make a few more changes, but all can be done in your GraphQL Controller. You need to map the array of given queries to a format that graphql-ruby understands. The gist below handles both batched and non-batched queries."),i=m(),$=k("pre"),j=m(),E=k("p"),I=d("Batching queries can reduce the time your app is loading by a large amount, making for a more pleasant user experience."),this.h()},l(n){a=h(n,"P",{});var k=g(a);s=y(k,"Query batching is a way to speed up your application. Instead of waiting on multiple client-server roundtrips to load data, everything is loaded at once."),k.forEach(b),t=f(n),e=h(n,"P",{});var d=g(e);o=y(d,"Enabling query batching in Apollo is as easy as using another network provider:"),d.forEach(b),p=f(n),c=h(n,"PRE",{class:!0}),g(c).forEach(b),l=f(n),u=h(n,"P",{});var m=g(u);r=y(m,"On the Ruby you need to make a few more changes, but all can be done in your GraphQL Controller. You need to map the array of given queries to a format that graphql-ruby understands. The gist below handles both batched and non-batched queries."),m.forEach(b),i=f(n),$=h(n,"PRE",{class:!0}),g($).forEach(b),j=f(n),E=h(n,"P",{});var w=g(E);I=y(w,"Batching queries can reduce the time your app is loading by a large amount, making for a more pleasant user experience."),w.forEach(b),this.h()},h(){w(c,"class","language-js"),w($,"class","language-rb")},m(n,k){v(n,a,k),q(a,s),v(n,t,k),v(n,e,k),q(e,o),v(n,p,k),v(n,c,k),c.innerHTML='<code class="language-js">  <span class="token keyword">import</span> ApolloClient<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> createBatchingNetworkInterface <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">\'apollo-client\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> batchingNetworkInterface <span class="token operator">=</span> <span class="token function">createBatchingNetworkInterface</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n    uri<span class="token operator">:</span> <span class="token string">\'localhost:3000\'</span><span class="token punctuation">,</span>\n    batchInterval<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token comment">// in milliseconds</span>\n    batchMax<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    opts<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// Options to pass along to &#96;fetch&#96;</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> apolloClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApolloClient</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n    networkInterface<span class="token operator">:</span> batchingNetworkInterface<span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',v(n,l,k),v(n,u,k),q(u,r),v(n,i,k),v(n,$,k),$.innerHTML='<code class="language-rb"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">execute</span></span>\n  context <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>\n\n  <span class="token comment"># Apollo sends the params in a _json</span>\n  <span class="token comment"># variable when batching is enabled</span>\n  <span class="token comment"># see the Apollo Documentation about query batching:</span>\n  <span class="token comment"># http://dev.apollodata.com/core/network.html#query-batching</span>\n  result <span class="token operator">=</span> <span class="token keyword">if</span> params<span class="token punctuation">[</span><span class="token symbol">:_json</span><span class="token punctuation">]</span>\n    queries <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token symbol">:_json</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map <span class="token keyword">do</span> <span class="token operator">|</span>param<span class="token operator">|</span>\n      <span class="token punctuation">&#123;</span>\n        query<span class="token punctuation">:</span> param<span class="token punctuation">[</span><span class="token string">\'query\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        operation_name<span class="token punctuation">:</span> param<span class="token punctuation">[</span><span class="token string">\'operationName\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        variables<span class="token punctuation">:</span> ensure_hash<span class="token punctuation">(</span>param<span class="token punctuation">[</span><span class="token string">\'variables\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        context<span class="token punctuation">:</span> context\n      <span class="token punctuation">&#125;</span>\n    <span class="token keyword">end</span>\n    <span class="token constant">MySchema</span><span class="token punctuation">.</span>multiplex<span class="token punctuation">(</span>queries<span class="token punctuation">)</span>\n  <span class="token keyword">else</span>\n    <span class="token constant">MySchema</span><span class="token punctuation">.</span>execute<span class="token punctuation">(</span>\n      params<span class="token punctuation">[</span><span class="token symbol">:query</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      operation_name<span class="token punctuation">:</span> params<span class="token punctuation">[</span><span class="token symbol">:operationName</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      variables<span class="token punctuation">:</span> ensure_hash<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:variables</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      context<span class="token punctuation">:</span> context\n    <span class="token punctuation">)</span>\n  <span class="token keyword">end</span>\n\n  render json<span class="token punctuation">:</span> result\n<span class="token keyword">end</span></code>',v(n,j,k),v(n,E,k),q(E,I)},p:x,d(n){n&&b(a),n&&b(t),n&&b(e),n&&b(p),n&&b(c),n&&b(l),n&&b(u),n&&b(i),n&&b($),n&&b(j),n&&b(E)}}}function E(n){let a,s;const k=[I];let d={$$slots:{default:[j]},$$scope:{ctx:n}};for(let e=0;e<k.length;e+=1)d=t(d,k[e]);return a=new $({props:d}),{c(){e(a.$$.fragment)},l(n){o(a.$$.fragment,n)},m(n,t){p(a,n,t),s=!0},p(n,[s]){const t=0&s?c(k,[i(I)]):{};1&s&&(t.$$scope={dirty:s,ctx:n}),a.$set(t)},i(n){s||(l(a.$$.fragment,n),s=!0)},o(n){u(a.$$.fragment,n),s=!1},d(n){r(a,n)}}}const I={title:"Apollo Query Batching and graphql-ruby",date:"2018-06-10T00:00:00.000Z",summary:"Query batching is a way to speed up your application. Instead of waiting on multiple client-server roundtrips to load data, everything is loaded at once."};export default class extends n{constructor(n){super(),a(this,n,null,E,s,{})}}export{I as metadata};
