import{S as e,i as t,s as o,A as a,j as r,m as n,o as s,p as i,v as l,r as c,w as h,q as d,e as u,t as p,k as f,c as g,a as m,g as w,d as y,n as E,b as v,f as b,E as S,G as k}from"../../chunks/vendor-f5a3c274.js";import{M as q}from"../../chunks/_mdsvex-4c7221f2.js";import"../../chunks/stores-0da78aa4.js";import"../../chunks/FormattedDate-b4a44e35.js";function T(e){let t,o,a,r,n,s,i,l,c,h,d,q,T,P,A,I,C,R,U,O,L,j,x,_,$,D,K,H,V,M,W,N,Y,z,B,F,G,J,Z,Q,X,ee,te,oe,ae,re,ne,se,ie,le,ce,he,de,ue,pe,fe,ge,me,we,ye,Ee,ve,be,Se,ke,qe,Te,Pe,Ae,Ie,Ce,Re,Ue,Oe,Le,je,xe,_e,$e,De,Ke,He,Ve,Me,We,Ne,Ye,ze,Be,Fe,Ge,Je,Ze,Qe,Xe,et,tt,ot,at,rt,nt,st,it,lt,ct,ht,dt,ut,pt,ft,gt,mt,wt,yt,Et,vt,bt,St,kt,qt,Tt,Pt,At,It,Ct,Rt,Ut,Ot,Lt,jt,xt,_t,$t,Dt,Kt,Ht,Vt,Mt,Wt,Nt,Yt,zt,Bt,Ft,Gt,Jt,Zt,Qt,Xt,eo,to,oo;return{c(){t=u("p"),o=p("A while ago Scaleway "),a=u("a"),r=p("announced their S3-compatible Object Storage"),n=p(". It implements most, but not all of the S3 API."),s=f(),i=u("p"),l=p("In an attempt to de-Amazon my personal stack I tried to migrate my S3 storage to Object Storage, including a little app that lets me upload photos and videos for my blog, which then get resized and transcoded in the required formats."),c=f(),h=u("p"),d=p("This endeavour took me a while, because I kept getting Signature errors or other vague responses from the Scaleway endpoints. The tl;dr at the bottom shows the “correct” way to implement this pre-signed URL upload in both the back-end and the front-end."),q=f(),T=u("h2"),P=u("a"),A=p("Pre-sign urls"),I=f(),C=u("p"),R=p("In order to have direct uploads, where the file gets uploaded directly to Scaleway, instead of to my server which then has to upload it, we need a pre-signed url that my front-end can upload the file to."),U=f(),O=u("p"),L=p("I use "),j=u("a"),x=p("SvelteKit"),_=p(" for my backend, but it should work with any framework."),$=f(),D=u("p"),K=p("The nice thing about being S3 compatible is that we can use the official "),H=u("a"),V=p("aws-sdk"),M=p("."),W=f(),N=u("p"),Y=p("The setup looks like this:"),z=f(),B=u("pre"),F=f(),G=u("p"),J=p("Make sure to set the "),Z=u("code"),Q=p("endpoint"),X=p(", "),ee=u("code"),te=p("region"),oe=p(" and "),ae=u("code"),re=p("signatureVersion"),ne=p(" to the correct values. In my case the bucket is hosted in Amsterdam."),se=f(),ie=u("p"),le=p("The "),ce=u("code"),he=p("({}).VITE_<value>"),de=p(" statements are specific to SvelteKit, replace it with whatever your framework’s way of accessing ENV vars is."),ue=f(),pe=u("p"),fe=p("We can then expose a function that generates the pre-signed upload url."),ge=f(),me=u("pre"),we=f(),ye=u("p"),Ee=p("This function requires two parameters, the Key (or path) where the file will be stored and the ContentType. This so Scaleway can serve the content with the correct format. (e.g. "),ve=u("code"),be=p("image/jpg"),Se=p(")."),ke=f(),qe=u("h2"),Te=u("a"),Pe=p("CORS"),Ae=f(),Ie=u("p"),Ce=p("Since we’ll be posting directly to the upload url from our own web-app, we need to setup the correct CORS headers. Otherwise your browser will reject any POST requests to the pre-signed url."),Re=f(),Ue=u("p"),Oe=p("My Scaleway lib exposes a "),Le=u("code"),je=p("cors()"),xe=p(" function that calls the Scaleway API and sets the correct headers. You only have to call this function once."),_e=f(),$e=u("pre"),De=f(),Ke=u("p"),He=p("Note that these are not the most specific CORS headers, it’s best to limit the allowed origins to the domain where your web-app is served."),Ve=f(),Me=u("h2"),We=u("a"),Ne=p("API"),Ye=f(),ze=u("p"),Be=p("Now that the back-end code is mostly done we have to expose the library to our front-end through an endpoint."),Fe=f(),Ge=u("p"),Je=p("With SvelteKit, it looks like below, but this code should be adapted to whatever your framework requires."),Ze=f(),Qe=u("pre"),Xe=f(),et=u("p"),tt=p("It could use a bit more error handling, but works for now :)"),ot=f(),at=u("h2"),rt=u("a"),nt=p("The front-end"),st=f(),it=u("p"),lt=p("In our front-end we need to create a number of requests for each file we’d like to upload, we need to:"),ct=f(),ht=u("ul"),dt=u("li"),ut=p("Get a Pre-signed URL from the backend"),pt=f(),ft=u("li"),gt=p("Upload the file to this URL"),mt=f(),wt=u("p"),yt=p("I put this code in a library to not pollute my other front-end code"),Et=f(),vt=u("pre"),bt=f(),St=u("p"),kt=p("The key thing to mention here is to match the headers for the POST to Scaleway’s Pre-Signed url. If you want to make it publicly available the "),qt=u("code"),Tt=p("x-amz-acl"),Pt=p(" header needs to be included here, otherwise you’ll either get Signature mismatch errors or other vague errors."),At=f(),It=u("p"),Ct=p("The final piece is to hook up the upload code to a form, in Svelte it looks something like this:"),Rt=f(),Ut=u("pre"),Ot=f(),Lt=u("h2"),jt=u("a"),xt=p("TL;DR"),_t=f(),$t=u("p"),Dt=p("In order to upload a publicly readable file to a pre-signed URL with Scaleway you need to make sure the "),Kt=u("strong"),Ht=p("given headers for the pre-signed URL and your "),Vt=u("code"),Mt=p("fetch"),Wt=p(" request in the browser match."),Nt=f(),Yt=u("p"),zt=p("The backend call should look like:"),Bt=f(),Ft=u("pre"),Gt=f(),Jt=u("p"),Zt=p("and the "),Qt=u("code"),Xt=p("fetch"),eo=p(" request in the front-end like:"),to=f(),oo=u("pre"),this.h()},l(e){t=g(e,"P",{});var u=m(t);o=w(u,"A while ago Scaleway "),a=g(u,"A",{href:!0,rel:!0});var p=m(a);r=w(p,"announced their S3-compatible Object Storage"),p.forEach(y),n=w(u,". It implements most, but not all of the S3 API."),u.forEach(y),s=E(e),i=g(e,"P",{});var f=m(i);l=w(f,"In an attempt to de-Amazon my personal stack I tried to migrate my S3 storage to Object Storage, including a little app that lets me upload photos and videos for my blog, which then get resized and transcoded in the required formats."),f.forEach(y),c=E(e),h=g(e,"P",{});var v=m(h);d=w(v,"This endeavour took me a while, because I kept getting Signature errors or other vague responses from the Scaleway endpoints. The tl;dr at the bottom shows the “correct” way to implement this pre-signed URL upload in both the back-end and the front-end."),v.forEach(y),q=E(e),T=g(e,"H2",{id:!0});var b=m(T);P=g(b,"A",{href:!0});var S=m(P);A=w(S,"Pre-sign urls"),S.forEach(y),b.forEach(y),I=E(e),C=g(e,"P",{});var k=m(C);R=w(k,"In order to have direct uploads, where the file gets uploaded directly to Scaleway, instead of to my server which then has to upload it, we need a pre-signed url that my front-end can upload the file to."),k.forEach(y),U=E(e),O=g(e,"P",{});var ao=m(O);L=w(ao,"I use "),j=g(ao,"A",{href:!0,rel:!0});var ro=m(j);x=w(ro,"SvelteKit"),ro.forEach(y),_=w(ao," for my backend, but it should work with any framework."),ao.forEach(y),$=E(e),D=g(e,"P",{});var no=m(D);K=w(no,"The nice thing about being S3 compatible is that we can use the official "),H=g(no,"A",{href:!0,rel:!0});var so=m(H);V=w(so,"aws-sdk"),so.forEach(y),M=w(no,"."),no.forEach(y),W=E(e),N=g(e,"P",{});var io=m(N);Y=w(io,"The setup looks like this:"),io.forEach(y),z=E(e),B=g(e,"PRE",{class:!0}),m(B).forEach(y),F=E(e),G=g(e,"P",{});var lo=m(G);J=w(lo,"Make sure to set the "),Z=g(lo,"CODE",{});var co=m(Z);Q=w(co,"endpoint"),co.forEach(y),X=w(lo,", "),ee=g(lo,"CODE",{});var ho=m(ee);te=w(ho,"region"),ho.forEach(y),oe=w(lo," and "),ae=g(lo,"CODE",{});var uo=m(ae);re=w(uo,"signatureVersion"),uo.forEach(y),ne=w(lo," to the correct values. In my case the bucket is hosted in Amsterdam."),lo.forEach(y),se=E(e),ie=g(e,"P",{});var po=m(ie);le=w(po,"The "),ce=g(po,"CODE",{});var fo=m(ce);he=w(fo,"({}).VITE_<value>"),fo.forEach(y),de=w(po," statements are specific to SvelteKit, replace it with whatever your framework’s way of accessing ENV vars is."),po.forEach(y),ue=E(e),pe=g(e,"P",{});var go=m(pe);fe=w(go,"We can then expose a function that generates the pre-signed upload url."),go.forEach(y),ge=E(e),me=g(e,"PRE",{class:!0}),m(me).forEach(y),we=E(e),ye=g(e,"P",{});var mo=m(ye);Ee=w(mo,"This function requires two parameters, the Key (or path) where the file will be stored and the ContentType. This so Scaleway can serve the content with the correct format. (e.g. "),ve=g(mo,"CODE",{});var wo=m(ve);be=w(wo,"image/jpg"),wo.forEach(y),Se=w(mo,")."),mo.forEach(y),ke=E(e),qe=g(e,"H2",{id:!0});var yo=m(qe);Te=g(yo,"A",{href:!0});var Eo=m(Te);Pe=w(Eo,"CORS"),Eo.forEach(y),yo.forEach(y),Ae=E(e),Ie=g(e,"P",{});var vo=m(Ie);Ce=w(vo,"Since we’ll be posting directly to the upload url from our own web-app, we need to setup the correct CORS headers. Otherwise your browser will reject any POST requests to the pre-signed url."),vo.forEach(y),Re=E(e),Ue=g(e,"P",{});var bo=m(Ue);Oe=w(bo,"My Scaleway lib exposes a "),Le=g(bo,"CODE",{});var So=m(Le);je=w(So,"cors()"),So.forEach(y),xe=w(bo," function that calls the Scaleway API and sets the correct headers. You only have to call this function once."),bo.forEach(y),_e=E(e),$e=g(e,"PRE",{class:!0}),m($e).forEach(y),De=E(e),Ke=g(e,"P",{});var ko=m(Ke);He=w(ko,"Note that these are not the most specific CORS headers, it’s best to limit the allowed origins to the domain where your web-app is served."),ko.forEach(y),Ve=E(e),Me=g(e,"H2",{id:!0});var qo=m(Me);We=g(qo,"A",{href:!0});var To=m(We);Ne=w(To,"API"),To.forEach(y),qo.forEach(y),Ye=E(e),ze=g(e,"P",{});var Po=m(ze);Be=w(Po,"Now that the back-end code is mostly done we have to expose the library to our front-end through an endpoint."),Po.forEach(y),Fe=E(e),Ge=g(e,"P",{});var Ao=m(Ge);Je=w(Ao,"With SvelteKit, it looks like below, but this code should be adapted to whatever your framework requires."),Ao.forEach(y),Ze=E(e),Qe=g(e,"PRE",{class:!0}),m(Qe).forEach(y),Xe=E(e),et=g(e,"P",{});var Io=m(et);tt=w(Io,"It could use a bit more error handling, but works for now :)"),Io.forEach(y),ot=E(e),at=g(e,"H2",{id:!0});var Co=m(at);rt=g(Co,"A",{href:!0});var Ro=m(rt);nt=w(Ro,"The front-end"),Ro.forEach(y),Co.forEach(y),st=E(e),it=g(e,"P",{});var Uo=m(it);lt=w(Uo,"In our front-end we need to create a number of requests for each file we’d like to upload, we need to:"),Uo.forEach(y),ct=E(e),ht=g(e,"UL",{});var Oo=m(ht);dt=g(Oo,"LI",{});var Lo=m(dt);ut=w(Lo,"Get a Pre-signed URL from the backend"),Lo.forEach(y),pt=E(Oo),ft=g(Oo,"LI",{});var jo=m(ft);gt=w(jo,"Upload the file to this URL"),jo.forEach(y),Oo.forEach(y),mt=E(e),wt=g(e,"P",{});var xo=m(wt);yt=w(xo,"I put this code in a library to not pollute my other front-end code"),xo.forEach(y),Et=E(e),vt=g(e,"PRE",{class:!0}),m(vt).forEach(y),bt=E(e),St=g(e,"P",{});var _o=m(St);kt=w(_o,"The key thing to mention here is to match the headers for the POST to Scaleway’s Pre-Signed url. If you want to make it publicly available the "),qt=g(_o,"CODE",{});var $o=m(qt);Tt=w($o,"x-amz-acl"),$o.forEach(y),Pt=w(_o," header needs to be included here, otherwise you’ll either get Signature mismatch errors or other vague errors."),_o.forEach(y),At=E(e),It=g(e,"P",{});var Do=m(It);Ct=w(Do,"The final piece is to hook up the upload code to a form, in Svelte it looks something like this:"),Do.forEach(y),Rt=E(e),Ut=g(e,"PRE",{class:!0}),m(Ut).forEach(y),Ot=E(e),Lt=g(e,"H2",{id:!0});var Ko=m(Lt);jt=g(Ko,"A",{href:!0});var Ho=m(jt);xt=w(Ho,"TL;DR"),Ho.forEach(y),Ko.forEach(y),_t=E(e),$t=g(e,"P",{});var Vo=m($t);Dt=w(Vo,"In order to upload a publicly readable file to a pre-signed URL with Scaleway you need to make sure the "),Kt=g(Vo,"STRONG",{});var Mo=m(Kt);Ht=w(Mo,"given headers for the pre-signed URL and your "),Vt=g(Mo,"CODE",{});var Wo=m(Vt);Mt=w(Wo,"fetch"),Wo.forEach(y),Wt=w(Mo," request in the browser match."),Mo.forEach(y),Vo.forEach(y),Nt=E(e),Yt=g(e,"P",{});var No=m(Yt);zt=w(No,"The backend call should look like:"),No.forEach(y),Bt=E(e),Ft=g(e,"PRE",{class:!0}),m(Ft).forEach(y),Gt=E(e),Jt=g(e,"P",{});var Yo=m(Jt);Zt=w(Yo,"and the "),Qt=g(Yo,"CODE",{});var zo=m(Qt);Xt=w(zo,"fetch"),zo.forEach(y),eo=w(Yo," request in the front-end like:"),Yo.forEach(y),to=E(e),oo=g(e,"PRE",{class:!0}),m(oo).forEach(y),this.h()},h(){v(a,"href","https://blog.scaleway.com/object-storage-general-availability/"),v(a,"rel","nofollow"),v(P,"href","#pre-sign-urls"),v(T,"id","pre-sign-urls"),v(j,"href","http://kit.svelte.dev"),v(j,"rel","nofollow"),v(H,"href","https://aws.amazon.com/sdk-for-javascript/"),v(H,"rel","nofollow"),v(B,"class","language-node"),v(me,"class","language-node"),v(Te,"href","#cors"),v(qe,"id","cors"),v($e,"class","language-node"),v(We,"href","#api"),v(Me,"id","api"),v(Qe,"class","language-node"),v(rt,"href","#the-front-end"),v(at,"id","the-front-end"),v(vt,"class","language-node"),v(Ut,"class","language-svelte"),v(jt,"href","#tldr"),v(Lt,"id","tldr"),v(Ft,"class","language-nodejs"),v(oo,"class","language-nodejs")},m(e,u){b(e,t,u),S(t,o),S(t,a),S(a,r),S(t,n),b(e,s,u),b(e,i,u),S(i,l),b(e,c,u),b(e,h,u),S(h,d),b(e,q,u),b(e,T,u),S(T,P),S(P,A),b(e,I,u),b(e,C,u),S(C,R),b(e,U,u),b(e,O,u),S(O,L),S(O,j),S(j,x),S(O,_),b(e,$,u),b(e,D,u),S(D,K),S(D,H),S(H,V),S(D,M),b(e,W,u),b(e,N,u),S(N,Y),b(e,z,u),b(e,B,u),B.innerHTML='<code class="language-node">import AWS from &#39;aws-sdk&#39;\n\nconst scw = new AWS.S3(&#123;\n  endpoint: &quot;s3.nl-ams.scw.cloud&quot;,\n  region: &quot;nl-ams&quot;,\n  accessKeyId: ({}).VITE_SCALEWAY_ACCESS_KEY,\n  secretAccessKey: ({}).VITE_SCALEWAY_ACCESS_SECRET,\n  signatureVersion: &quot;v4&quot;,\n  params: &#123; Bucket: ({}).VITE_SCALEWAY_BUCKET &#125;,\n&#125;)\n</code>',b(e,F,u),b(e,G,u),S(G,J),S(G,Z),S(Z,Q),S(G,X),S(G,ee),S(ee,te),S(G,oe),S(G,ae),S(ae,re),S(G,ne),b(e,se,u),b(e,ie,u),S(ie,le),S(ie,ce),S(ce,he),S(ie,de),b(e,ue,u),b(e,pe,u),S(pe,fe),b(e,ge,u),b(e,me,u),me.innerHTML='<code class="language-node">export async function uploadUrl(key, contentType) &#123;\n  return scw.getSignedUrl(\n    &#39;putObject&#39;,\n    &#123;\n      Key: key,\n      ACL: &quot;public-read&quot;,\n      ContentType: contentType\n    &#125;\n  )\n&#125;</code>',b(e,we,u),b(e,ye,u),S(ye,Ee),S(ye,ve),S(ve,be),S(ye,Se),b(e,ke,u),b(e,qe,u),S(qe,Te),S(Te,Pe),b(e,Ae,u),b(e,Ie,u),S(Ie,Ce),b(e,Re,u),b(e,Ue,u),S(Ue,Oe),S(Ue,Le),S(Le,je),S(Ue,xe),b(e,_e,u),b(e,$e,u),$e.innerHTML='<code class="language-node">export async function cors() &#123;\n  return await scw.putBucketCors(&#123;CORSConfiguration: &#123;\n    &quot;CORSRules&quot;: [\n      &#123;\n        &quot;AllowedOrigins&quot;: [&quot;*&quot;],\n        &quot;AllowedHeaders&quot;: [&quot;*&quot;],\n        &quot;AllowedMethods&quot;: [&quot;GET&quot;, &quot;HEAD&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;],\n      &#125;\n    ]\n  &#125;&#125;).promise()\n&#125;</code>',b(e,De,u),b(e,Ke,u),S(Ke,He),b(e,Ve,u),b(e,Me,u),S(Me,We),S(We,Ne),b(e,Ye,u),b(e,ze,u),S(ze,Be),b(e,Fe,u),b(e,Ge,u),S(Ge,Je),b(e,Ze,u),b(e,Qe,u),Qe.innerHTML='<code class="language-node">import &#123;\n  isAuthenticated,\n  INVALID_AUTH_RESPONSE,\n  invalidRequest\n&#125; from &#39;$lib/api/auth&#39;\nimport &#123; uploadUrl &#125; from &#39;$lib/api/scw&#39;\n\nexport async function post(request) &#123;\n  if (!isAuthenticated(request)) &#123;\n    return INVALID_AUTH_RESPONSE\n  &#125;\n  if (!request.body.path) &#123;\n    return invalidRequest(&#123; path: &quot;Path field is requried&quot; &#125;)\n  &#125;\n  const url = await uploadUrl(\n    request.body.path,\n    request.body.contentType\n  )\n\n  return &#123;\n    status: 200,\n    body: &#123; url: url &#125;\n  &#125;\n&#125;</code>',b(e,Xe,u),b(e,et,u),S(et,tt),b(e,ot,u),b(e,at,u),S(at,rt),S(rt,nt),b(e,st,u),b(e,it,u),S(it,lt),b(e,ct,u),b(e,ht,u),S(ht,dt),S(dt,ut),S(ht,pt),S(ht,ft),S(ft,gt),b(e,mt,u),b(e,wt,u),S(wt,yt),b(e,Et,u),b(e,vt,u),vt.innerHTML='<code class="language-node">export async function remoteUpload(key, file) &#123;\n\tconst url = await getPresignedUrl(key, file)\n\treturn await remoteUploadFile(url, file)\n&#125;\n\n// Get pre-signed upload url from backend\nasync function getPresignedUrl(key, file) &#123;\n\tconst response = await fetch(&#39;/api/uploads/presign-url&#39;, &#123;\n\t\tmethod: &#39;POST&#39;,\n\t\tbody: JSON.stringify(&#123;\n\t\t\tpath: key,\n\t\t\tcontentType: file.type\n\t\t&#125;),\n\t\theaders: &#123;\n\t\t\t&#39;Content-Type&#39;: &#39;application/json&#39;\n\t\t&#125;\n\t&#125;)\n\tconst presignData = await response.json()\n\treturn presignData.url\n&#125;\n\n// Upload file to external S3-compatible endpoint\nasync function remoteUploadFile(url, file) &#123;\n\tconst response = await fetch(decodeURI(url), &#123;\n\t\tmethod: &#39;PUT&#39;,\n\t\tbody: file,\n\t\theaders: &#123;\n\t\t  &#39;x-amz-acl&#39;: &#39;public-read&#39;,\n\t\t  &#39;Content-Type&#39;: file.type\n\t  &#125;\n\t&#125;)\n\n\treturn await response.text()\n&#125;</code>',b(e,bt,u),b(e,St,u),S(St,kt),S(St,qt),S(qt,Tt),S(St,Pt),b(e,At,u),b(e,It,u),S(It,Ct),b(e,Rt,u),b(e,Ut,u),Ut.innerHTML='<code class="language-svelte">&lt;script&gt;\n\timport remoteUpload from &#39;$lib/helpers/remoteUpload&#39;\n\timport Button from &#39;$lib/components/Button.svelte&#39;\n\n\tlet fileinput\n\tconst onFileSelected = async (e) =&gt; &#123;\n\t\tfor (const file of e.target.files) &#123;\n\t\t\tawait remoteUpload(&#96;files/$&#123;file.name&#125;&#96;, file)\n\t\t&#125;\n\t&#125;\n&lt;/script&gt;\n&lt;div id=&quot;uploadForm&quot;&gt;\n\t&lt;div id=&quot;form&quot;&gt;\n\t\t&lt;Button\n\t\t\tvalue=&quot;Choose file(s)&quot;\n\t\t\ton:click=&#123;() =&gt; fileinput.click()&#125;\n\t\t/&gt;\n\t\t&lt;input\n\t\t\tstyle=&quot;display:none&quot;\n\t\t\ttype=&quot;file&quot;\n\t\t\taccept=&quot;.jpg, .jpeg, .png, .mp4&quot;\n\t\t\tmultiple\n\t\t\ton:change=&#123;(e) =&gt; onFileSelected(e)&#125;\n\t\t\tbind:this=&#123;fileinput&#125;\n\t\t/&gt;\n\t&lt;/div&gt;\n&lt;/div&gt;</code>',b(e,Ot,u),b(e,Lt,u),S(Lt,jt),S(jt,xt),b(e,_t,u),b(e,$t,u),S($t,Dt),S($t,Kt),S(Kt,Ht),S(Kt,Vt),S(Vt,Mt),S(Kt,Wt),b(e,Nt,u),b(e,Yt,u),S(Yt,zt),b(e,Bt,u),b(e,Ft,u),Ft.innerHTML='<code class="language-nodejs">import AWS from &#39;aws-sdk&#39;\n\nconst scw = new AWS.S3(&#123;\n  endpoint: &quot;s3.nl-ams.scw.cloud&quot;,\n  region: &quot;nl-ams&quot;,\n  accessKeyId: ({}).VITE_SCALEWAY_ACCESS_KEY,\n  secretAccessKey: ({}).VITE_SCALEWAY_ACCESS_SECRET,\n  signatureVersion: &quot;v4&quot;,\n  params: &#123; Bucket: ({}).VITE_SCALEWAY_BUCKET &#125;,\n&#125;)\n\nexport async function uploadUrl(key, contentType) &#123;\n  return scw.getSignedUrl(\n    &#39;putObject&#39;,\n    &#123;\n      Key: key,\n      ACL: &quot;public-read&quot;,\n      ContentType: contentType\n    &#125;\n  )\n&#125;</code>',b(e,Gt,u),b(e,Jt,u),S(Jt,Zt),S(Jt,Qt),S(Qt,Xt),S(Jt,eo),b(e,to,u),b(e,oo,u),oo.innerHTML='<code class="language-nodejs">// Upload file to external S3-compatible endpoint\nasync function remoteUploadFile(url, file) &#123;\n\tconst response = await fetch(decodeURI(url), &#123;\n\t\tmethod: &#39;PUT&#39;,\n\t\tbody: file,\n\t\theaders: &#123;\n\t\t  &#39;x-amz-acl&#39;: &#39;public-read&#39;,\n\t\t  &#39;Content-Type&#39;: file.type\n\t  &#125;\n\t&#125;)\n\n\treturn await response.text()\n&#125;</code>'},p:k,d(e){e&&y(t),e&&y(s),e&&y(i),e&&y(c),e&&y(h),e&&y(q),e&&y(T),e&&y(I),e&&y(C),e&&y(U),e&&y(O),e&&y($),e&&y(D),e&&y(W),e&&y(N),e&&y(z),e&&y(B),e&&y(F),e&&y(G),e&&y(se),e&&y(ie),e&&y(ue),e&&y(pe),e&&y(ge),e&&y(me),e&&y(we),e&&y(ye),e&&y(ke),e&&y(qe),e&&y(Ae),e&&y(Ie),e&&y(Re),e&&y(Ue),e&&y(_e),e&&y($e),e&&y(De),e&&y(Ke),e&&y(Ve),e&&y(Me),e&&y(Ye),e&&y(ze),e&&y(Fe),e&&y(Ge),e&&y(Ze),e&&y(Qe),e&&y(Xe),e&&y(et),e&&y(ot),e&&y(at),e&&y(st),e&&y(it),e&&y(ct),e&&y(ht),e&&y(mt),e&&y(wt),e&&y(Et),e&&y(vt),e&&y(bt),e&&y(St),e&&y(At),e&&y(It),e&&y(Rt),e&&y(Ut),e&&y(Ot),e&&y(Lt),e&&y(_t),e&&y($t),e&&y(Nt),e&&y(Yt),e&&y(Bt),e&&y(Ft),e&&y(Gt),e&&y(Jt),e&&y(to),e&&y(oo)}}}function P(e){let t,o;const u=[A];let p={$$slots:{default:[T]},$$scope:{ctx:e}};for(let r=0;r<u.length;r+=1)p=a(p,u[r]);return t=new q({props:p}),{c(){r(t.$$.fragment)},l(e){n(t.$$.fragment,e)},m(e,a){s(t,e,a),o=!0},p(e,[o]){const a=0&o?i(u,[d(A)]):{};1&o&&(a.$$scope={dirty:o,ctx:e}),t.$set(a)},i(e){o||(l(t.$$.fragment,e),o=!0)},o(e){c(t.$$.fragment,e),o=!1},d(e){h(t,e)}}}const A={title:"Remote uploads with pre-signed URLs on Scaleway's object storage.",date:"2021-04-20T00:00:00.000Z",summary:"Or, make sure your headers match, otherwise you'll get a lot of strange errors.",layout:"note"};export default class extends e{constructor(e){super(),t(this,e,null,P,o,{})}}export{A as metadata};
