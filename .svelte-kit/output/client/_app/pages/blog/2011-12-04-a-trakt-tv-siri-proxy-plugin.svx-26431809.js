import{S as a,i as s,s as n,A as t,j as e,m as o,o as r,p as i,v as p,r as c,w as l,q as h,e as u,t as d,k as f,c as k,a as m,g as w,d as g,n as y,b as v,f as b,E,G as x,a1 as T}from"../../chunks/vendor-f5a3c274.js";import{M as _}from"../../chunks/_mdsvex-0fbf9182.js";import"../../chunks/stores-0da78aa4.js";import"../../chunks/FormattedDate-b4a44e35.js";function A(a){let s,n,t,e,o,r,i,p,c,l,h,_,A,P,H,S,$,j,I,N,G,U,C,D,F,V,W,q,z,M,L,R,Z,B,J,K,O,Q,X,Y,aa,sa,na,ta,ea,oa,ra,ia,pa,ca,la,ha,ua,da,fa,ka,ma,wa,ga,ya,va;return{c(){s=u("h2"),n=u("a"),t=d("Hi, Siri"),e=f(),o=u("p"),r=d("With the siri proxy gem ("),i=u("a"),p=d("https://github.com/plamoni/SiriProxy"),c=d(") creating your own fun stuff for iPhone 4s’s Siri is pretty straight forward."),l=f(),h=u("h2"),_=u("a"),A=d("Hi, Trakt"),P=f(),H=u("p"),S=u("a"),$=d("Trakt.tv"),j=d(" has an amazing API and I wrote a small wrapper (see "),I=u("a"),N=d("lib/trakt.tv"),G=d(") in the project) to fetch a users’s calendar for that night."),U=f(),C=u("h2"),D=u("a"),F=d("How i did it."),V=f(),W=u("p"),q=d("First off make sure you read all the documentation on the proxy github page, setting up the DNS server can be tricky if you don’t follow all the steps in the video."),z=f(),M=u("h3"),L=u("a"),R=d("Naming"),Z=f(),B=u("p"),J=d("Naming is very important for the siri proxy so make sure you do it right! The name you set in the siri proxy config should be the classname you extend the plugin from.\nThe name downcased should be the gem name (with siriproxy prepended)\nIt took me a while to figure out and get everything up and running."),K=f(),O=u("h3"),Q=u("a"),X=d("Code"),Y=f(),aa=u("pre"),sa=f(),na=u("p"),ta=d("The listen_for tells the proxy what words to match with the response from apple, the code in the block gets executed when the words match"),ea=f(),oa=u("p"),ra=d("In the generate_calendar_response i create a new view and add every episode i get from trakt to it. The whole thing gets returned to your iPhone and siri tells you the results :)"),ia=f(),pa=u("h2"),ca=u("a"),la=d("The result"),ha=f(),ua=u("p"),da=d("The video below shows the result."),fa=f(),ma=f(),wa=u("p"),ga=d("As always the code can be found on "),ya=u("a"),va=d("GitHub"),this.h()},l(a){s=k(a,"H2",{id:!0});var u=m(s);n=k(u,"A",{href:!0});var d=m(n);t=w(d,"Hi, Siri"),d.forEach(g),u.forEach(g),e=y(a),o=k(a,"P",{});var f=m(o);r=w(f,"With the siri proxy gem ("),i=k(f,"A",{href:!0,rel:!0});var v=m(i);p=w(v,"https://github.com/plamoni/SiriProxy"),v.forEach(g),c=w(f,") creating your own fun stuff for iPhone 4s’s Siri is pretty straight forward."),f.forEach(g),l=y(a),h=k(a,"H2",{id:!0});var b=m(h);_=k(b,"A",{href:!0});var E=m(_);A=w(E,"Hi, Trakt"),E.forEach(g),b.forEach(g),P=y(a),H=k(a,"P",{});var x=m(H);S=k(x,"A",{href:!0,rel:!0});var T=m(S);$=w(T,"Trakt.tv"),T.forEach(g),j=w(x," has an amazing API and I wrote a small wrapper (see "),I=k(x,"A",{href:!0,rel:!0});var ka=m(I);N=w(ka,"lib/trakt.tv"),ka.forEach(g),G=w(x,") in the project) to fetch a users’s calendar for that night."),x.forEach(g),U=y(a),C=k(a,"H2",{id:!0});var ba=m(C);D=k(ba,"A",{href:!0});var Ea=m(D);F=w(Ea,"How i did it."),Ea.forEach(g),ba.forEach(g),V=y(a),W=k(a,"P",{});var xa=m(W);q=w(xa,"First off make sure you read all the documentation on the proxy github page, setting up the DNS server can be tricky if you don’t follow all the steps in the video."),xa.forEach(g),z=y(a),M=k(a,"H3",{id:!0});var Ta=m(M);L=k(Ta,"A",{href:!0});var _a=m(L);R=w(_a,"Naming"),_a.forEach(g),Ta.forEach(g),Z=y(a),B=k(a,"P",{});var Aa=m(B);J=w(Aa,"Naming is very important for the siri proxy so make sure you do it right! The name you set in the siri proxy config should be the classname you extend the plugin from.\nThe name downcased should be the gem name (with siriproxy prepended)\nIt took me a while to figure out and get everything up and running."),Aa.forEach(g),K=y(a),O=k(a,"H3",{id:!0});var Pa=m(O);Q=k(Pa,"A",{href:!0});var Ha=m(Q);X=w(Ha,"Code"),Ha.forEach(g),Pa.forEach(g),Y=y(a),aa=k(a,"PRE",{class:!0}),m(aa).forEach(g),sa=y(a),na=k(a,"P",{});var Sa=m(na);ta=w(Sa,"The listen_for tells the proxy what words to match with the response from apple, the code in the block gets executed when the words match"),Sa.forEach(g),ea=y(a),oa=k(a,"P",{});var $a=m(oa);ra=w($a,"In the generate_calendar_response i create a new view and add every episode i get from trakt to it. The whole thing gets returned to your iPhone and siri tells you the results :)"),$a.forEach(g),ia=y(a),pa=k(a,"H2",{id:!0});var ja=m(pa);ca=k(ja,"A",{href:!0});var Ia=m(ca);la=w(Ia,"The result"),Ia.forEach(g),ja.forEach(g),ha=y(a),ua=k(a,"P",{});var Na=m(ua);da=w(Na,"The video below shows the result."),Na.forEach(g),fa=y(a),ma=y(a),wa=k(a,"P",{});var Ga=m(wa);ga=w(Ga,"As always the code can be found on "),ya=k(Ga,"A",{href:!0,rel:!0});var Ua=m(ya);va=w(Ua,"GitHub"),Ua.forEach(g),Ga.forEach(g),this.h()},h(){v(n,"href","#hi-siri"),v(s,"id","hi-siri"),v(i,"href","https://github.com/plamoni/SiriProxy"),v(i,"rel","nofollow"),v(_,"href","#hi-trakt"),v(h,"id","hi-trakt"),v(S,"href","https://trakt.tv"),v(S,"rel","nofollow"),v(I,"href","https://github.com/matsimitsu/SiritTrakt/blob/master/lib/trakt.rb"),v(I,"rel","nofollow"),v(D,"href","#how-i-did-it"),v(C,"id","how-i-did-it"),v(L,"href","#naming"),v(M,"id","naming"),v(Q,"href","#code"),v(O,"id","code"),v(aa,"class","language-ruby"),v(ca,"href","#the-result"),v(pa,"id","the-result"),ka=new T(ma),v(ya,"href","https://github.com/matsimitsu/SiritTrakt"),v(ya,"rel","nofollow")},m(a,u){b(a,s,u),E(s,n),E(n,t),b(a,e,u),b(a,o,u),E(o,r),E(o,i),E(i,p),E(o,c),b(a,l,u),b(a,h,u),E(h,_),E(_,A),b(a,P,u),b(a,H,u),E(H,S),E(S,$),E(H,j),E(H,I),E(I,N),E(H,G),b(a,U,u),b(a,C,u),E(C,D),E(D,F),b(a,V,u),b(a,W,u),E(W,q),b(a,z,u),b(a,M,u),E(M,L),E(L,R),b(a,Z,u),b(a,B,u),E(B,J),b(a,K,u),b(a,O,u),E(O,Q),E(Q,X),b(a,Y,u),b(a,aa,u),aa.innerHTML='<code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">generate_calendar_response</span></span><span class="token punctuation">(</span>ref_id<span class="token punctuation">)</span>\n  object <span class="token operator">=</span> <span class="token constant">SiriAddViews</span><span class="token punctuation">.</span><span class="token keyword">new</span>\n  object<span class="token punctuation">.</span>make_root<span class="token punctuation">(</span>ref_id<span class="token punctuation">)</span>\n  object<span class="token punctuation">.</span>views <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token constant">SiriAssistantUtteranceView</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">"Here is your trakt calendar!"</span><span class="token punctuation">)</span>\n\n  episodes <span class="token operator">=</span> <span class="token constant">Trakt</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">User</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Calendar</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>results<span class="token punctuation">.</span>first<span class="token punctuation">[</span><span class="token string">\'episodes\'</span><span class="token punctuation">]</span>\n  episodes<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>calendar_result<span class="token operator">|</span>\n    object<span class="token punctuation">.</span>views <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token constant">SiriAssistantUtteranceView</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>calendar_result<span class="token punctuation">[</span><span class="token string">\'show\'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">\'title\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token keyword">end</span>\n  object\n<span class="token keyword">end</span>\n\nlisten_for <span class="token operator">/</span>what\'s on tv tonight<span class="token operator">/</span>i <span class="token keyword">do</span>\n  send_object <span class="token keyword">self</span><span class="token punctuation">.</span>generate_calendar_response<span class="token punctuation">(</span>last_ref_id<span class="token punctuation">)</span>\n  request_completed\n<span class="token keyword">end</span></code>',b(a,sa,u),b(a,na,u),E(na,ta),b(a,ea,u),b(a,oa,u),E(oa,ra),b(a,ia,u),b(a,pa,u),E(pa,ca),E(ca,la),b(a,ha,u),b(a,ua,u),E(ua,da),b(a,fa,u),ka.m('<iframe width="100%" height="500" src="https://www.youtube.com/embed/Utu9o5WG1d0" frameborder="0" allowfullscreen></iframe>',a,u),b(a,ma,u),b(a,wa,u),E(wa,ga),E(wa,ya),E(ya,va)},p:x,d(a){a&&g(s),a&&g(e),a&&g(o),a&&g(l),a&&g(h),a&&g(P),a&&g(H),a&&g(U),a&&g(C),a&&g(V),a&&g(W),a&&g(z),a&&g(M),a&&g(Z),a&&g(B),a&&g(K),a&&g(O),a&&g(Y),a&&g(aa),a&&g(sa),a&&g(na),a&&g(ea),a&&g(oa),a&&g(ia),a&&g(pa),a&&g(ha),a&&g(ua),a&&g(fa),a&&ka.d(),a&&g(ma),a&&g(wa)}}}function P(a){let s,n;const u=[H];let d={$$slots:{default:[A]},$$scope:{ctx:a}};for(let e=0;e<u.length;e+=1)d=t(d,u[e]);return s=new _({props:d}),{c(){e(s.$$.fragment)},l(a){o(s.$$.fragment,a)},m(a,t){r(s,a,t),n=!0},p(a,[n]){const t=0&n?i(u,[h(H)]):{};1&n&&(t.$$scope={dirty:n,ctx:a}),s.$set(t)},i(a){n||(p(s.$$.fragment,a),n=!0)},o(a){c(s.$$.fragment,a),n=!1},d(a){l(s,a)}}}const H={title:"A trakt.tv siri proxy plugin",date:"2011-12-04T00:00:00.000Z",tags:null,summary:"Siri tells you your upcoming tv shows for the night.",layout:"blog"};export default class extends a{constructor(a){super(),s(this,a,null,P,n,{})}}export{H as metadata};
